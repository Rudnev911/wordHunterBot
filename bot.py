from telegram import Update, KeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup
import os
import aiohttp
from dotenv import load_dotenv
import random
import asyncio

load_dotenv()
token = os.getenv('TOKEN')
token_weather = os.getenv('TOKEN_WEATHER')
catToken = os.getenv('catToken')

# –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏ —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_info(update: Update):
    chat_id = update.effective_chat.id
    user = update.effective_user
    user_id = user.id
    message = update.effective_message
    timestamp = int(message.date.timestamp())
    first_name = user.first_name or ''
    last_name = user.last_name or ''
    full_name = f'{first_name} {last_name}'.strip()
    ava_str = f'{user.username}{timestamp}'.strip()
    ava_url = f'https://robohash.org/{ava_str}?set=set5' # –ó–∞–º–µ–Ω–∏–ª –º–æ–Ω—Å—Ç—Ä–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ—á–∫–æ–≤
    return chat_id, first_name, full_name, ava_url, user_id

async def say_hi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    text = update.message.text
    
    if text == '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä':
        await context.bot.send_photo(chat_id=user_info[0], photo=user_info[3])
    elif text == '–ú–æ–π ID':
        await context.bot.send_message(chat_id=user_info[0], text=f'–¢–≤–æ–π ID: {user_info[4]}')
    elif text == '–§–æ—Ç–æ –∫–æ—Ç–∞':
        await send_cat(update, context)
    elif text == '–ú–æ–π IP': # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–∞
        ip_address = await get_ip_address()
        await context.bot.send_message(
            chat_id=user_info[0],
            text=f'–í–∞—à IP –∞–¥—Ä–µ—Å: {ip_address}'
        )
    elif text == '–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è':
        await request_location(update, context)
    else:
        await context.bot.send_message(chat_id=user_info[0], text=f'{user_info[1]}, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?')

async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    location_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã üìç', request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await context.bot.send_message(
        chat_id=user_info[0],
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:',
        reply_markup=location_keyboard
    )

#Get cat photo
async def get_cat_photo() -> str:
    url = "https://api.thecatapi.com/v1/images/search"
    
    headers = {
        'x-api-key': catToken  # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status != 200:
                return None
            data = await resp.json()
            return data[0]['url']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∞

#send cat photo  
async def send_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ –∫–æ—Ç–∞
        cat_url = await get_cat_photo()
        
        if cat_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–æ—Ç–∞
            await context.bot.send_photo(
                chat_id=user_info[0],
                photo=cat_url,
                caption="–í–æ—Ç –≤–∞—à –∫–æ—Ç–∏–∫! üê±"
            )
        else:
            await context.bot.send_message(
                chat_id=user_info[0],
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∞ üòø"
            )
            
    except Exception as e:
        await context.bot.send_message(
            chat_id=user_info[0],
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    latitude = location.latitude
    longitude = location.longitude
    context.user_data['location'] = (latitude, longitude)

    weather_report = await get_weather(latitude, longitude)
    await update.message.reply_text(weather_report)

    main_menu = ReplyKeyboardMarkup([
        ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è', '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä'],
        ['–ú–æ–π ID', '–ú–æ–π IP'],
        ['/random_digit']
    ], resize_keyboard=True)
    await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu)

async def get_weather(lat: float, lon: float) -> str:
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={token_weather}&units=metric&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status != 200:
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ'
            data = await resp.json()

    city = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
    weather_desc = data['weather'][0]['description']
    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    wind_speed = data['wind']['speed']

    if wind_speed < 5:
        wind_recom = "–ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è, –≤–µ—Ç—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç"
    elif wind_speed < 10:
        wind_recom = "–ù–∞ —É–ª–∏—Ü–µ –≤–µ—Ç—Ä–µ–Ω–æ, –æ–¥–µ–Ω—å—Ç–µ—Å—å —á—É—Ç—å —Ç–µ–ø–ª–µ–µ"
    elif wind_speed < 20:
        wind_recom = "–í–µ—Ç–µ—Ä –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞"
    else:
        wind_recom = "–ù–∞ —É–ª–∏—Ü–µ —É—Ä–∞–≥–∞–Ω, –Ω–∞ —É–ª–∏—Ü—É –ª—É—á—à–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å"

    return (f'–°–µ–π—á–∞—Å –≤ {city}: {weather_desc}\n'
            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n'
            f'–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n'
            f'{wind_recom}')

#keybord
async def wake_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    button = ReplyKeyboardMarkup([
        ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è', '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä'],
        ['–ú–æ–π ID', '–ú–æ–π IP'],
        ['–§–æ—Ç–æ –∫–æ—Ç–∞' ,'/random_digit']
    ], resize_keyboard=True)
    
    await context.bot.send_message(
        chat_id=user_info[0],
        text=f'Hello, {user_info[2]}, –º—ã –Ω–∞—á–∏–Ω–∞–µ–º!',
        reply_markup=button
    )

async def miid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name or ''
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:\n"
             f"‚Ä¢ User ID: {user_id}\n"
             f"‚Ä¢ Chat ID: {chat_id}\n"
             f"‚Ä¢ –ò–º—è: {first_name}\n"
    )

#Get IP address - teper tochno
async def get_ip_address() -> str:
    url = "https://api.ipify.org?format=json"
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=5) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data['ip']
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP"
        except asyncio.TimeoutError:
            return "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {str(e)}"


async def random_digit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    random_number = random.randint(1, 100)
    
    await context.bot.send_message(
        chat_id=user_info[0],
        text=f'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_number}'
    )

application = ApplicationBuilder().token(token).build()
application.add_handler(CommandHandler('start', wake_up))
application.add_handler(CommandHandler('miID', miid_command))
application.add_handler(CommandHandler('random_digit', random_digit))
application.add_handler(MessageHandler(filters.TEXT, say_hi))
application.add_handler(MessageHandler(filters.LOCATION, handle_location))
application.run_polling()