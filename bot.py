from telegram import Update, KeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup
import os
import aiohttp
from dotenv import load_dotenv
import random
import asyncio

load_dotenv()
token = os.getenv('TOKEN')
token_weather = os.getenv('TOKEN_WEATHER')
catToken = os.getenv('catToken')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not token:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ (TOKEN) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not token_weather:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–æ–∫–µ–Ω –ø–æ–≥–æ–¥—ã (TOKEN_WEATHER) –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not catToken:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–æ–∫–µ–Ω –∫–æ—Ç–∏–∫–æ–≤ (catToken) –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏ —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_info(update: Update):
    try:
        if not update or not update.effective_chat:
            return None, "–ì–æ—Å—Ç—å", "–ì–æ—Å—Ç—å", "", 0
            
        chat_id = update.effective_chat.id
        user = update.effective_user
        user_id = user.id if user else 0
        message = update.effective_message
        timestamp = int(message.date.timestamp()) if message else 0
        first_name = user.first_name or '' if user else ''
        last_name = user.last_name or '' if user else ''
        full_name = f'{first_name} {last_name}'.strip()
        username = user.username if user else 'anonymous'
        ava_str = f'{username}{timestamp}'.strip()
        ava_url = f'https://robohash.org/{ava_str}?set=set5' # –ø–æ–º–µ–Ω—è–ª –º–æ–Ω—Å—Ç—Ä–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ—á–∫–æ–≤
        return chat_id, first_name, full_name, ava_url, user_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_user_info: {e}")
        return None, "–ì–æ—Å—Ç—å", "–ì–æ—Å—Ç—å", "", 0

async def say_hi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update or not update.message:
            return
            
        user_info = get_user_info(update)
        if not user_info[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º chat_id
            return
            
        text = update.message.text
        
        if text == '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä':
            await context.bot.send_photo(chat_id=user_info[0], photo=user_info[3])
        elif text == '–ú–æ–π ID':
            await context.bot.send_message(chat_id=user_info[0], text=f'–¢–≤–æ–π ID: {user_info[4]}')
        elif text == '–§–æ—Ç–æ –∫–æ—Ç–∞':
            await send_cat(update, context)
        elif text == '–ú–æ–π IP':
            ip_address = await get_ip_address()
            await context.bot.send_message(
                chat_id=user_info[0],
                text=f'–í–∞—à IP –∞–¥—Ä–µ—Å: {ip_address}'
            )
        elif text == '–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è':
            await request_location(update, context)
        else:
            await context.bot.send_message(chat_id=user_info[0], text=f'{user_info[1]}, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ say_hi: {e}")
        try:
            if update and update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
                )
        except:
            pass

async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        location_keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã üìç', request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await context.bot.send_message(
            chat_id=user_info[0],
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:',
            reply_markup=location_keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ request_location: {e}")

async def get_cat_photo() -> str:
    if not catToken:
        return None
        
    try:
        url = "https://api.thecatapi.com/v1/images/search"
        
        headers = {
            'x-api-key': catToken
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=10) as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()
                return data[0]['url']
    except asyncio.TimeoutError:
        print("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∞")
        return None
    except aiohttp.ClientError as e:
        print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∞: {e}")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_cat_photo: {e}")
        return None

async def send_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        cat_url = await get_cat_photo()
        
        if cat_url:
            await context.bot.send_photo(
                chat_id=user_info[0],
                photo=cat_url,
                caption="–í–æ—Ç –≤–∞—à –∫–æ—Ç–∏–∫! üê±"
            )
        else:
            await context.bot.send_message(
                chat_id=user_info[0],
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∞ üòø"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_cat: {e}")
        try:
            if update and update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ç–∏–∫–∞"
                )
        except:
            pass

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update or not update.message:
            return
            
        if update.message.location is None:
            latitude, longitude = 55.7558, 37.6173
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
        else:
            location = update.message.location
            latitude, longitude = location.latitude, location.longitude
        
        context.user_data['location'] = (latitude, longitude)
        weather_report = await get_weather(latitude, longitude)
        
        await update.message.reply_text(weather_report)

        main_menu = ReplyKeyboardMarkup([
            ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è', '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä'],
            ['–ú–æ–π ID', '–ú–æ–π IP'],
            ['–§–æ—Ç–æ –∫–æ—Ç–∞', '/random_digit']
        ], resize_keyboard=True)
        await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_location: {e}")
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏")
            
            main_menu = ReplyKeyboardMarkup([
                ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è', '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä'],
                ['–ú–æ–π ID', '–ú–æ–π IP'],
                ['–§–æ—Ç–æ –∫–æ—Ç–∞', '/random_digit']
            ], resize_keyboard=True)
            await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu)
        except:
            pass

async def get_weather(lat: float, lon: float) -> str:
    if not token_weather:
        return "–¢–æ–∫–µ–Ω –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
        
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={token_weather}&units=metric&lang=ru"

        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status != 200:
                    return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
                data = await resp.json()
                
        try: 
            city = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
            weather_desc = data['weather'][0]['description']
            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            wind_speed = data['wind']['speed']

            if wind_speed < 5:
                wind_recom = "–ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è, –≤–µ—Ç—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç"
            elif wind_speed < 10:
                wind_recom = "–ù–∞ —É–ª–∏—Ü–µ –≤–µ—Ç—Ä–µ–Ω–æ, –æ–¥–µ–Ω—å—Ç–µ—Å—å —á—É—Ç—å —Ç–µ–ø–ª–µ–µ"
            elif wind_speed < 20:
                wind_recom = "–í–µ—Ç–µ—Ä –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞"
            else:
                wind_recom = "–ù–∞ —É–ª–∏—Ü–µ —É—Ä–∞–≥–∞–Ω, –Ω–∞ —É–ª–∏—Ü—É –ª—É—á—à–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å"

            return (f'–°–µ–π—á–∞—Å –≤ {city}: {weather_desc}\n'
                    f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n'
                    f'–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n'
                    f'{wind_recom}')
        except (KeyError, IndexError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–≥–æ–¥—ã: {e}")
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.'
            
    except aiohttp.ClientError:
        return '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã.'
    except asyncio.TimeoutError:
        return '–°–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_weather: {e}")
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.'

async def wake_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        button = ReplyKeyboardMarkup([
            ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è', '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä'],
            ['–ú–æ–π ID', '–ú–æ–π IP'],
            ['–§–æ—Ç–æ –∫–æ—Ç–∞', '/random_digit']
        ], resize_keyboard=True)
        
        await context.bot.send_message(
            chat_id=user_info[0],
            text=f'Hello, {user_info[2]}, –º—ã –Ω–∞—á–∏–Ω–∞–µ–º!',
            reply_markup=button
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ wake_up: {e}")

async def miid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update or not update.effective_chat:
            return
            
        chat_id = update.effective_chat.id
        user = update.effective_user
        user_id = user.id if user else 0
        first_name = user.first_name or '' if user else ''
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:\n"
                 f"‚Ä¢ User ID: {user_id}\n"
                 f"‚Ä¢ Chat ID: {chat_id}\n"
                 f"‚Ä¢ –ò–º—è: {first_name}\n"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ miid_command: {e}")

async def get_ip_address() -> str:
    try:
        url = "https://api.ipify.org?format=json"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=5) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data['ip']
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except asyncio.TimeoutError:
        return "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É IP"
    except aiohttp.ClientError:
        return "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP"
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_ip_address: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP: {str(e)}"

async def random_digit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        random_number = random.randint(1, 100)
        
        await context.bot.send_message(
            chat_id=user_info[0],
            text=f'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_number}'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ random_digit: {e}")

def main():
    try:
        if not token:
            print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        application = ApplicationBuilder().token(token).build()
        application.add_handler(CommandHandler('start', wake_up))
        application.add_handler(CommandHandler('miID', miid_command))
        application.add_handler(CommandHandler('random_digit', random_digit))
        application.add_handler(MessageHandler(filters.TEXT, say_hi))
        application.add_handler(MessageHandler(filters.LOCATION, handle_location))
        
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()