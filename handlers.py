import random
from telegram import Update, KeyboardButton
from telegram.ext import ContextTypes
from telegram import ReplyKeyboardMarkup
from utils import get_user_info, get_ip_address, get_cat_photo, get_weather, create_main_menu

async def say_hi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if not update or not update.message:
            return
            
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        text = update.message.text
        
        if text == '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä':
            await context.bot.send_photo(chat_id=user_info[0], photo=user_info[3])
        elif text == '–ú–æ–π ID':
            await context.bot.send_message(chat_id=user_info[0], text=f'–¢–≤–æ–π ID: {user_info[4]}')
        elif text == '–§–æ—Ç–æ –∫–æ—Ç–∞':
            await send_cat(update, context)
        elif text == '–ú–æ–π IP':
            ip_address = await get_ip_address()
            await context.bot.send_message(chat_id=user_info[0], text=f'–í–∞—à IP –∞–¥—Ä–µ—Å: {ip_address}')
        elif text == '–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è':
            await request_location(update, context)
        else:
            await context.bot.send_message(chat_id=user_info[0], text=f'{user_info[1]}, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ say_hi: {e}")

async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    try:
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        location_keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã üìç', request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await context.bot.send_message(
            chat_id=user_info[0],
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:',
            reply_markup=location_keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ request_location: {e}")

async def send_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∫–æ—Ç–∞"""
    try:
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        catToken = context.bot_data.get('catToken')
        cat_url = await get_cat_photo(catToken)
        
        if cat_url:
            await context.bot.send_photo(
                chat_id=user_info[0],
                photo=cat_url,
                caption="–í–æ—Ç –≤–∞—à –∫–æ—Ç–∏–∫! üê±"
            )
        else:
            await context.bot.send_message(
                chat_id=user_info[0],
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∞ üòø"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_cat: {e}")

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    try:
        if not update or not update.message:
            return
            
        if update.message.location is None:
            latitude, longitude = 55.7558, 37.6173
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
        else:
            location = update.message.location
            latitude, longitude = location.latitude, location.longitude
        
        context.user_data['location'] = (latitude, longitude)
        token_weather = context.bot_data.get('token_weather')
        weather_report = await get_weather(latitude, longitude, token_weather)
        
        await update.message.reply_text(weather_report)

        main_menu = create_main_menu()
        await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_location: {e}")

async def wake_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        button = create_main_menu()
        
        await context.bot.send_message(
            chat_id=user_info[0],
            text=f'Hello, {user_info[2]}, –º—ã –Ω–∞—á–∏–Ω–∞–µ–º!',
            reply_markup=button
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ wake_up: {e}")

async def miid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /miID"""
    try:
        if not update or not update.effective_chat:
            return
            
        chat_id = update.effective_chat.id
        user = update.effective_user
        user_id = user.id if user else 0
        first_name = user.first_name or '' if user else ''
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:\n"
                 f"‚Ä¢ User ID: {user_id}\n"
                 f"‚Ä¢ Chat ID: {chat_id}\n"
                 f"‚Ä¢ –ò–º—è: {first_name}\n"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ miid_command: {e}")

async def random_digit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random_digit"""
    try:
        user_info = get_user_info(update)
        if not user_info[0]:
            return
            
        random_number = random.randint(1, 100)
        
        await context.bot.send_message(
            chat_id=user_info[0],
            text=f'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_number}'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ random_digit: {e}")